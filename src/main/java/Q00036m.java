import java.util.Arrays;

/**
 * 判断一个9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 *
 * 数字1-9在每一行只能出现一次。
 * 数字1-9在每一列只能出现一次。
 * 数字1-9在每一个以粗实线分隔的3x3宫内只能出现一次。
 *
 * 数独部分空格内已填入了数字，空白格用'.'表示。
 *
 * 示例1:
 * 输入:
 * [
 *   ["5","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: true
 *
 * 示例2:
 * 输入:
 * [
 *  ["8","3",".",".","7",".",".",".","."],
 *  ["6",".",".","1","9","5",".",".","."],
 *  [".","9","8",".",".",".",".","6","."],
 *  ["8",".",".",".","6",".",".",".","3"],
 *  ["4",".",".","8",".","3",".",".","1"],
 *  ["7",".",".",".","2",".",".",".","6"],
 *  [".","6",".",".",".",".","2","8","."],
 *  [".",".",".","4","1","9",".",".","5"],
 *  [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 *      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 说明:
 *
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字1-9和字符'.'。
 * 给定数独永远是9x9形式的。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/valid-sudoku
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class Q00036m {

    public boolean isValidSudoku(char[][] board) {
        int[] rows = new int[9];
        int[] cols = new int[9];
        Arrays.fill(rows, -1);
        Arrays.fill(cols, -1);
        // 判断每一行
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] != '.') {
                    int idx = board[i][j] - '1';
                    if (rows[idx] == i) return false;
                    rows[idx] = i;
                }
            }
        }
        // 判断每一列
        for (int j = 0; j < 9; j++) {
            for (int i = 0; i < 9; i++) {
                if (board[i][j] != '.') {
                    int idx = board[i][j] - '1';
                    if (cols[idx] == j) return false;
                    cols[idx] = j;
                }
            }
        }
        Arrays.fill(rows, -1);
        Arrays.fill(cols, -1);
        for (int k = 0; k <= 2; k++) { // +1 = 1 2 3
            for (int i = 3 * k; i < 3 * (k + 1); i++) { // 0 1 2   3 4 5  6 7 8
                for (int j = 0; j < 3; j++) {
                    if (board[i][j] != '.') {
                        int idx = board[i][j] - '1';
                        if (rows[idx] == k && cols[idx] == 0)
                            return false;
                        rows[idx] = k;
                        cols[idx] = 0;
                    }
                }
            }
            for (int i = 3 * k; i < 3 * (k + 1); i++) {
                for (int j = 3; j < 6; j++) {
                    if (board[i][j] != '.') {
                        int idx = board[i][j] - '1';
                        if (rows[idx] == k && cols[idx] == 1)
                            return false;
                        rows[idx] = k;
                        cols[idx] = 1;
                    }
                }
            }
            for (int i = 3 * k; i < 3 * (k + 1); i++) {
                for (int j = 6; j < 9; j++) {
                    if (board[i][j] != '.') {
                        int idx = board[i][j] - '1';
                        if (rows[idx] == k && cols[idx] == 2)
                            return false;
                        rows[idx] = k;
                        cols[idx] = 2;
                    }
                }
            }
        }
        return true;
    }

}
